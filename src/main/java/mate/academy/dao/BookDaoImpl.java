package mate.academy.dao;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import mate.academy.ConnectionUtil;
import mate.academy.DataProcessingException;
import mate.academy.lib.Dao;
import mate.academy.model.Book;

@Dao
public class BookDaoImpl implements BookDao {
    @Override
    public Book create(Book book) {
        String query = "INSERT INTO books (title, price) VALUES (?, ?)";

        try (Connection conn = ConnectionUtil.getConn();
                var statement = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {

            statement.setString(1, book.getTitle());
            statement.setBigDecimal(2, book.getPrice());
            int affectedRows = statement.executeUpdate();
            if (affectedRows != 1) {
                throw new DataProcessingException("Query must add only one row to the table");
            }

            // Interesting moment: the ResultSet pointer is positioned before the first row.
            // So when we try to get something out of it, we should call next to get first row.
            ResultSet generatedKeys = statement.getGeneratedKeys();
            if (generatedKeys.next()) {
                long id = generatedKeys.getInt(1);
                book.setId(id);
            } else {
                throw new DataProcessingException("Exception retrieving autogenerated book id");
            }
        } catch (SQLException e) {
            throw new DataProcessingException("Exception when tried to insert book to DB", e);
        }
        return book;
    }

    @Override
    public Optional<Book> findById(Long id) {
        Book book = null; // returned null if a result set empty
        String query = "SELECT * FROM books WHERE id = ?";

        try (Connection conn = ConnectionUtil.getConn();
                PreparedStatement statement = conn.prepareStatement(query)) {

            statement.setLong(1, id);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                book = getBookFromResultSet(resultSet);
            }
        } catch (SQLException e) {
            throw new DataProcessingException("Exception occurred when fetching Book from DB", e);
        }
        return Optional.ofNullable(book);
    }

    @Override
    public List<Book> findAll() {
        List<Book> books = new ArrayList<>();
        String query = "SELECT * FROM books";

        try (Connection conn = ConnectionUtil.getConn();
                PreparedStatement statement = conn.prepareStatement(query)) {

            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                books.add(getBookFromResultSet(resultSet));
            }
        } catch (SQLException e) {
            throw new DataProcessingException("Exception when tried to fetch all from DB", e);
        }
        return books;
    }

    @Override
    public Book update(Book book) {
        String query = "UPDATE books SET title = ?, price = ? WHERE id = ?";
        Book oldBook = findById(book.getId()).orElseThrow(
                () -> new DataProcessingException("Book you want to update is absent in table"));

        try (Connection conn = ConnectionUtil.getConn();
                PreparedStatement statement = conn.prepareStatement(query)) {

            statement.setString(1, book.getTitle());
            statement.setBigDecimal(2, book.getPrice());
            statement.setLong(3, book.getId());

            int affectedRows = statement.executeUpdate();
            if (affectedRows != 1) {
                throw new DataProcessingException("Query must update only one row in the table");
            }
        } catch (SQLException e) {
            throw new DataProcessingException("Exception when tried to fetch all from DB", e);
        }
        return oldBook;
    }

    @Override
    public boolean deleteById(Long id) {
        String query = "DELETE FROM books WHERE id = ?";
        int affectedRows;

        try (Connection conn = ConnectionUtil.getConn();
                PreparedStatement statement = conn.prepareStatement(query)) {

            statement.setLong(1, id);
            affectedRows = statement.executeUpdate();
        } catch (SQLException e) {
            throw new DataProcessingException("Exception when tried to delete row from DB", e);
        }
        // Returning true if we deleted one object from db
        return affectedRows > 1;
    }

    private Book getBookFromResultSet(ResultSet resultSet) throws SQLException {
        long gotId = resultSet.getLong("id");
        String model = resultSet.getString("title");
        BigDecimal year = resultSet.getObject("price", BigDecimal.class);
        Book book = new Book(model, year);
        book.setId(gotId);
        return book;
    }
}

package mate.academy.dao.impl;import mate.academy.dao.BookDao;import mate.academy.exeption.DataProcessingException;import mate.academy.lib.Dao;import mate.academy.model.Book;import mate.academy.util.ConnectionUtil;import java.sql.*;import java.util.ArrayList;import java.util.List;import java.util.Optional;@Daopublic class BookDaoImpl implements BookDao {    @Override    public Book create(Book book) {        String query = "INSERT INTO books(title, price) VALUES(?, ?);";        try (Connection connection = ConnectionUtil.getConnection();             PreparedStatement statement =                     connection.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {            statement.setString(1, book.getTitle());            statement.setBigDecimal(2, book.getPrice());            ResultSet resultSet = statement.getGeneratedKeys();            if (resultSet.next()) {                book.setId(resultSet.getObject(1, Long.class));            }        } catch (SQLException e) {            throw new DataProcessingException("Can't add book to DB: " + book, e);        }        return book;    }    @Override    public Optional<Book> findById(Long id) {        String query = "SELECT * FROM books WHERE id = ?;";        Book book = null;        try (Connection connection = ConnectionUtil.getConnection();             PreparedStatement statement = connection.prepareStatement(query)) {            statement.setLong(1, id);            ResultSet resultSet = statement.executeQuery();            if (resultSet.next()) {                book = getBookFromResultSet(resultSet);            }        } catch (SQLException e) {            throw new DataProcessingException("Can't find book with id: " + id, e);        }        return Optional.ofNullable(book);    }    @Override    public List<Book> findAll() {        String query = "SELECT * FROM books";        List<Book> books = new ArrayList<>();        try (Connection connection = ConnectionUtil.getConnection();             PreparedStatement statement = connection.prepareStatement(query)) {            ResultSet resultSet = statement.executeQuery(query);            while (resultSet.next()) {                books.add(getBookFromResultSet(resultSet));            }        } catch (SQLException e) {            throw new DataProcessingException("Can't get books from DB", e);        }        return books;    }    @Override    public Book update(Book book) {        String query = "UPDATE books SET title = ?, price = ? WHERE id = ?";        try (Connection connection = ConnectionUtil.getConnection();             PreparedStatement statement = connection.prepareStatement(query)) {            statement.setString(1, book.getTitle());            statement.setBigDecimal(2, book.getPrice());            statement.setLong(3, book.getId());        } catch (SQLException e) {            throw new DataProcessingException("Can't update book: " + book, e);        }        return book;    }    @Override    public boolean deleteById(Long id) {        String query = "DELETE FROM books WHERE id = ?";        try (Connection connection = ConnectionUtil.getConnection();             PreparedStatement statement = connection.prepareStatement(query)) {            statement.setLong(1, id);            return statement.executeUpdate() > 0;        } catch (SQLException e) {            throw new DataProcessingException("Can't delete book with id: " + id, e);        }    }    private Book getBookFromResultSet(ResultSet resultSet) throws SQLException {        Book book = new Book();        book.setId(resultSet.getObject("id", Long.class));        book.setTitle(resultSet.getString("title"));        book.setPrice(resultSet.getBigDecimal("price"));        return book;    }}